#!/usr/bin/env python3

import itertools
import os.path
import random
import sys

from taskutils import BaseTask


FLAG_PREFIX = 'RUCTF'
FLAG_SUFFIX_LENGTH = 16

KEY_MIN_LENGTH = 15
KEY_MAX_LENGTH = 20

ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
ALPHABET_INDEX = {c: i for (i, c) in enumerate(ALPHABET)}

def encrypt(text, key):
    cryptogram = ""
    key_pos = 0
    for ch in text:
        if not ch in ALPHABET:
            cryptogram += ch
        else:
            new_idx = (ALPHABET_INDEX[ch] + ALPHABET_INDEX[key[key_pos]]) % len(ALPHABET)
            new_ch = ALPHABET[new_idx]
            key_pos = (key_pos + 1) % len(key)

            cryptogram += new_ch
    return cryptogram

def get_random_string(length):
    return "".join( random.choice(ALPHABET) for _ in range(length) )

def create_task(fn):
    with open(fn, "rt", encoding="utf-8") as f:
        text = f.read().split()

    flag = FLAG_PREFIX + get_random_string(FLAG_SUFFIX_LENGTH)
    print(flag)
    text.insert(random.randrange(len(text)), flag)
    text = ' '.join(text)

    key = get_random_string(random.randrange(KEY_MIN_LENGTH, KEY_MAX_LENGTH + 1))

    return (flag, encrypt(text, key))


class Task(BaseTask.create(
    NAME='Classics', CATEGORY='crypto', SCORE=1, DB_FILE='flags.db',
    TEXT_FILE=os.path.join(
        os.path.dirname(os.path.abspath(__file__)), 'text.txt'),
    HTML_EN="Decrypt the text: <pre>{}</pre>",
    HTML_RU="Расшифруйте текст: <pre>{}</pre>")):

    @BaseTask.cmd("create")
    def cmd_create(self, dump_dir, team_id, *rest):
        (flag, text) = create_task(Task.TEXT_FILE)
        quid = Task.store_flag(os.path.join(dump_dir, Task.DB_FILE), flag)
        print("ID:{}".format(quid))
        print("html[en]:{}".format(Task.HTML_EN.format(text)))
        print("html[ru]:{}".format(Task.HTML_RU.format(text)))

    @BaseTask.cmd("user")
    def cmd_user(self, dump_dir, quid, *rest):
        code = Task.check_task(dump_dir, quid)
        return (0 if code else 1)


def main(args):
    sys.stdout = open(1, 'w', encoding='utf-8', closefd=True)
    return Task().run(*args)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
