#!/usr/bin/env python3
from PIL import Image, ImageDraw
import sys
import binascii
import hashlib
import os
import subprocess
import shutil


CATEGORY = 'deadpixel'
SCORE = 1
NAME = "Dead Pixel"


def get_flag(team):
    hash_object = hashlib.md5((team + 'itstimeto').encode('utf-8'))
    return 'RUCTF' + hash_object.hexdigest()[:8]


def get_filename(team):
    hash_object = hashlib.md5((team + 'getschwifty').encode('utf-8'))
    return hash_object.hexdigest()[3:14]


def generate_video(team, dump_dir):
    os.makedirs(dump_dir + "/" + team, exist_ok = True)
    os.makedirs('static', exist_ok = True)
    if os.path.isfile('{}/rick_and_morty_episode_{}.mov'.format(dump_dir, get_filename(team))):
        return "static/rick_and_morty_episode_" + get_filename(team) + ".mov"
    string = '0' + \
        str(bin(int(binascii.hexlify(bytes(get_flag(team), 'utf-8')), 16))[2:])
    string = string.rjust(105, '0')

    for i in range(1, 105):
        img = Image.open(os.path.dirname(__file__)+'/original/image-' + str(i) + '.png')
        draw = ImageDraw.Draw(img)
        draw.point((13, 37),
                   (int(string[i])*255, int(string[i])*255, int(string[i])*255))
        img.save(dump_dir + '/' + team + '/image-' + str(i) + '.png', 'PNG')
    print('images generated for {}'.format(team), file=sys.stderr)
    # Video generation: avconv -i "image-%d.png" -r 25 -c:v libx264 -crf 20
    # -pix_fmt yuv420p video.mov

    cmd = " ".join(['avconv', '-i', '"{}/{}/image-%d.png"'.format(dump_dir, team), '-r', '25', 
                    '-c:v', 'libx264', '-crf', '20', '-pix_fmt', 'yuv420p', 
                    '{}/rick_and_morty_episode_{}.mov'.format(dump_dir, get_filename(team))])
    script = open(dump_dir + '/' + get_filename(team), 'w')
    script.write(cmd)
    script.close()
    subprocess.call(['bash', dump_dir + '/' + get_filename(team)])
    print('video generated for {}'.format(team), file=sys.stderr)
    os.remove(dump_dir + '/' + get_filename(team))
    shutil.rmtree(dump_dir + '/' + team)
    return "static/rick_and_morty_episode_" + get_filename(team) + ".mov"


def main():
    action = sys.argv[1].lower()
    if action == 'id':
        print("{}:{}".format(CATEGORY, SCORE))
    elif action == 'series':
        print(CATEGORY)
    elif action == 'name':
        print(NAME)
    elif action == 'create':
        dump_dir = sys.argv[2]
        team_id = sys.argv[3]
        quid = generate_video(team_id, dump_dir)
        if quid is None:
            print("Can't create task")
            exit(1)
        else:
            print("ID:" + team_id+'pix')
            HTML_EN = " I have some problems with my LCD, so I can't watch <a href='{}'>my favorite cartoon</a>. Can you help me? ".format(
                quid)
            HTML_RU = " У меня какие-то проблемы с монитором, поэтому я не могу смотреть <a href='{}'>любимый мультик</a>. Поможешь? ".format(
                quid)
            print("html[en]:{}".format(HTML_EN))
            print("html[ru]:{}".format(HTML_RU))
    elif action == 'user':
        dump_dir = sys.argv[2]
        quid = sys.argv[3]
        answer = sys.stdin.readline().strip()
        stat = 0 if (answer == quid[:-3]) else 1
        exit(stat)
    else:
        print("No such action: '{}' available actions are: id, series, name, create, user".format(
            action), file=sys.stderr)
        exit(1)

if __name__ == '__main__':
    main()
